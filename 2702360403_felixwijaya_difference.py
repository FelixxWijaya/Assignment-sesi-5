# -*- coding: utf-8 -*-
"""2702360403_FelixWijaya_DIFFERENCE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/185R5vTM-_BD52GaNqOmPjFKZSbJ5AG3y
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('seaborn-poster')
# %matplotlib inline

# step size
h = 0.1
# define grid
x = np.arange(0, 2*np.pi, h)
# compute function
y = np.cos(x)
# compute vector of forward differences
forward_diff = np.diff(y)/h
# compute corresponding grid
x_diff = x[:-1:]
# compute exact solution
exact_solution = -np.sin(x_diff)
# Plot solution
plt.figure(figsize = (12, 8))
plt.plot(x_diff, forward_diff, '--', \
        label = 'Finite difference approximation')
plt.plot(x_diff, exact_solution, \
          label = 'Exact solution')
plt.legend()
plt.show()
# Compute max error between
# numerical derivative and exact solution
max_error = max(abs(exact_solution - forward_diff))
print(max_error)

"""QUIZ

give the evenly spaced data points

x   | 0      | 0.1   | 0.2    | 0.3    | 0.4   |
f(x)| 0.0000 | 0.189 | 0.1341 | 0.1646 | 0.1797|
"""

import numpy as np
import matplotlib.pyplot as plt

# Step size
h = 0.1

# Define grid
x_values = [0, 0.1, 0.2, 0.3, 0.4]
y_values = [0.0000, 0.0819, 0.1341, 0.1646, 0.1797]

# Compute forward difference at x = 0
forward_diff_x0 = (y_values[1] - y_values[0]) / h

# Compute forward difference at x = 0.2
forward_diff_x02 = (y_values[3] - y_values[2]) / h

# Alternative computation of forward difference
forward_diff_alt = [(y_values[i+1] - y_values[i]) / h for i in range(len(y_values) - 1)]

# Print the results
print("Forward difference at x = 0 (formula):", forward_diff_x0)
print("Forward difference at x = 0.2 (formula):", forward_diff_x02)

# Plot the data points
plt.figure(figsize=(10, 6))
plt.plot(x_values, y_values, marker='o', label='Data Points')

# Plot the forward difference at x = 0
plt.annotate('Forward Diff at x = 0: {:.4f}'.format(forward_diff_x0),
             xy=(0, y_values[0]), xytext=(0.2, y_values[0] + 0.05),
             arrowprops=dict(facecolor='black', arrowstyle='->'))
plt.scatter([0], [y_values[0]], color='red')

# Plot the forward difference at x = 0.2
plt.annotate('Forward Diff at x = 0.2: {:.4f}'.format(forward_diff_x02),
             xy=(0.2, y_values[1]), xytext=(0.4, y_values[1] + 0.05),
             arrowprops=dict(facecolor='black', arrowstyle='->'))
plt.scatter([0.2], [y_values[1]], color='red')

plt.xlabel('x')
plt.ylabel('f(x)')
plt.title('Data Points and Forward Difference')
plt.legend()
plt.grid(True)
plt.show()

# Print the alternative forward differences
print("Alternative forward differences:", forward_diff_alt)